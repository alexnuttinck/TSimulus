package be.cetic.tsgen

import org.joda.time.LocalDateTime

/**
  * This time series generator is a composition of other generators.
  * The values provided by each generator are summed.
  *
  * @param generators the generators to compose in order to create a new time series
  * @param aggregator the function to apply to aggregate the values generated by each generator
  */
class CompositeTimeSeries[T](aggregator: Seq[T] => T, val generators: Seq[TimeSeries[T]]) extends TimeSeries[T]
{
   override def compute(times: Stream[LocalDateTime]): Stream[T] =
      generators.map(c => c.compute(times).map(Seq(_)))
                .reduce((s1: Stream[Seq[T]], s2: Stream[Seq[T]]) => (s1 zip s2).map(e => e._1 ++ e._2))
                .map(aggregator)
}


object CompositeTimeSeries
{
   /**
     * @param aggregator the function to apply to aggregate the values generated by each generator
     * @param generators the generators to compose in order to create a new time series
     * @tparam T
     * @return A time series made of the aggregation of all considered generators
     */
   def apply[T](aggregator: Seq[T] => T, generators: TimeSeries[T]*): CompositeTimeSeries[T] =
      new CompositeTimeSeries(aggregator, generators)
}